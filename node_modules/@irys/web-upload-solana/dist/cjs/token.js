"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const web_1 = require("@irys/bundles/web");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const base_1 = tslib_1.__importDefault(require("@irys/web-upload/tokens/base"));
const bs58_1 = tslib_1.__importDefault(require("bs58"));
const async_retry_1 = tslib_1.__importDefault(require("async-retry"));
const web3_js_1 = require("@solana/web3.js");
class SolanaConfig extends base_1.default {
    constructor(config) {
        super(config);
        this.minConfirm = 1;
        this.finality = 'finalized';
        this.base = ['lamports', 1e9];
        this.finality = this?.opts?.finality ?? 'finalized';
    }
    async getProvider() {
        if (!this.providerInstance) {
            this.providerInstance = new web3_js_1.Connection(this.providerUrl, {
                confirmTransactionInitialTimeout: 60_000,
                commitment: this.finality,
            });
        }
        return this.providerInstance;
    }
    async getTx(txId) {
        const connection = await this.getProvider();
        const stx = await connection.getTransaction(txId, {
            commitment: this.finality,
            maxSupportedTransactionVersion: 0,
        });
        if (!stx)
            throw new Error('Confirmed tx not found');
        const currentSlot = await connection.getSlot(this.finality);
        if (!stx.meta)
            throw new Error(`Unable to resolve transaction ${txId}`);
        const amount = new bignumber_js_1.default(stx.meta.postBalances[1]).minus(new bignumber_js_1.default(stx.meta.preBalances[1]));
        const staticAccountKeys = stx.transaction.message.getAccountKeys().staticAccountKeys;
        const tx = {
            from: staticAccountKeys[0].toBase58(),
            to: staticAccountKeys[1].toBase58(),
            amount: amount,
            blockHeight: new bignumber_js_1.default(stx.slot),
            pending: false,
            confirmed: currentSlot - stx.slot >= 1,
        };
        return tx;
    }
    async ownerToAddress(owner) {
        if (typeof owner === 'string') {
            owner = Buffer.from(owner);
        }
        return bs58_1.default.encode(owner);
    }
    async sign(data) {
        return await (await this.getSigner()).sign(data);
    }
    getSigner() {
        if (!this.signer) {
            // if (this.wallet?.name === "Phantom") {
            //     this.signer = new PhantomSigner(this.wallet)
            // } else {
            //     this.signer = new InjectedSolanaSigner(this.wallet)
            // }
            this.signer = new web_1.HexInjectedSolanaSigner(this.wallet);
        }
        return this.signer;
    }
    verify(pub, data, signature) {
        // if (this.wallet?.name === "Phantom") {
        //     return PhantomSigner.verify(pub, data, signature)
        // }
        // return InjectedSolanaSigner.verify(pub, data, signature);
        return web_1.HexInjectedSolanaSigner.verify(pub, data, signature);
    }
    async getCurrentHeight() {
        return new bignumber_js_1.default((await (await this.getProvider()).getEpochInfo()).blockHeight ?? 0);
    }
    async getFee(amount, to, multiplier) {
        const connection = await this.getProvider();
        const unsignedTx = await this._createTxUnsigned(amount, to ?? 'DHyDV2ZjN3rB6qNGXS48dP5onfbZd3fAEz6C5HJwSqRD');
        const computeBudget = new bignumber_js_1.default((await unsignedTx.getEstimatedFee(connection)) ?? 5000);
        const recentPrio = await connection
            ?.getRecentPrioritizationFees?.()
            .catch((_) => [{ prioritizationFee: 0 }]);
        const prioAvg = recentPrio
            .reduce((n, p) => n.plus(p.prioritizationFee), new bignumber_js_1.default(0))
            .dividedToIntegerBy(recentPrio.length ?? 1);
        return {
            computeBudget,
            computeUnitPrice: prioAvg
                .multipliedBy(multiplier ?? 1)
                .integerValue(bignumber_js_1.default.ROUND_CEIL),
        };
    }
    async sendTx(data) {
        return await this.wallet.sendTransaction(data, await this.getProvider(), {
            skipPreflight: true,
        });
    }
    async _createTxUnsigned(amount, to, fee) {
        const pubkey = new web3_js_1.PublicKey(await this.getPublicKey());
        const blockHashInfo = await (0, async_retry_1.default)(async (bail) => {
            try {
                return await (await this.getProvider()).getLatestBlockhash(this.finality);
            }
            catch (e) {
                if (e.message?.includes('blockhash'))
                    throw e;
                else
                    bail(e);
                throw new Error('Unreachable');
            }
        }, { retries: 3, minTimeout: 1000 });
        const transaction = new web3_js_1.Transaction({ ...blockHashInfo, feePayer: pubkey });
        transaction.add(web3_js_1.SystemProgram.transfer({
            fromPubkey: pubkey,
            toPubkey: new web3_js_1.PublicKey(to),
            lamports: +new bignumber_js_1.default(amount).toNumber(),
        }));
        if (!this?.config?.opts?.disablePriorityFees && fee) {
            transaction.add(web3_js_1.ComputeBudgetProgram.setComputeUnitPrice({
                microLamports: fee.computeUnitPrice.toNumber(),
            }));
            transaction.add(web3_js_1.ComputeBudgetProgram.setComputeUnitLimit({
                units: fee.computeBudget.toNumber(),
            }));
        }
        return transaction;
    }
    async createTx(amount, to, _fee) {
        const transaction = await this._createTxUnsigned(amount, to, _fee);
        return { tx: transaction, txId: undefined };
    }
    async getPublicKey() {
        if (!this.wallet.publicKey)
            throw new Error('Wallet.publicKey is undefined');
        return this.wallet.publicKey.toBuffer();
    }
}
exports.default = SolanaConfig;
//# sourceMappingURL=token.js.map