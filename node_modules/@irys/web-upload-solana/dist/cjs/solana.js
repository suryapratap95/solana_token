"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebUSDCSolana = exports.WebEclipseEth = exports.WebSolana = exports.SolanaToken = void 0;
const tslib_1 = require("tslib");
const token_1 = tslib_1.__importDefault(require("./token"));
const spl_1 = tslib_1.__importDefault(require("./spl"));
class SolanaToken extends token_1.default {
    constructor(config) {
        super({
            name: 'solana',
            ticker: 'SOL',
            ...config,
            providerUrl: config.providerUrl ?? 'https://api.mainnet-beta.solana.com/',
        });
    }
}
exports.SolanaToken = SolanaToken;
function getBoundSolana({ name, ticker, providerUrl, }) {
    return class SolanaToken extends token_1.default {
        constructor(config) {
            super({
                name,
                ticker,
                ...config,
                providerUrl: config.providerUrl ?? providerUrl,
            });
        }
    };
}
// export function SolanaBundlerWebIrys(opts?:  { finality?: Finality; disablePriorityFees?: boolean } ) {
//     // return a builder
//     return new Builder(SolanaToken).withTokenOptions(opts)
// }
// export default SolanaBundlerWebIrys
// export function EclipseBundlerWebIrys(opts?:  { finality?: Finality; disablePriorityFees?: boolean } ) {
//     return new Builder(getBoundSolana({name: "eclipse", ticker: "ETH", providerUrl:  "https://mainnetbeta-rpc.eclipse.xyz"}))
//     .withTokenOptions(opts)
// }
exports.WebSolana = SolanaToken;
exports.default = exports.WebSolana;
exports.WebEclipseEth = getBoundSolana({
    name: 'eclipse-eth',
    ticker: 'ETH',
    providerUrl: 'https://mainnetbeta-rpc.eclipse.xyz',
});
function getBoundSPL({ name, ticker, providerUrl, contractAddress, }) {
    return class SPLToken extends spl_1.default {
        constructor(config) {
            super({
                name,
                ticker,
                ...config,
                providerUrl: config.providerUrl ?? providerUrl,
                contractAddress: config?.opts?.contractAddress ?? contractAddress,
            });
        }
    };
}
exports.WebUSDCSolana = getBoundSPL({
    name: 'usdc-solana',
    ticker: 'USDC',
    providerUrl: 'https://api.mainnet-beta.solana.com/',
    contractAddress: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',
});
//# sourceMappingURL=solana.js.map