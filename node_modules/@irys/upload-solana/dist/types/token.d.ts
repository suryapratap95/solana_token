import type { Signer } from '@irys/bundles';
import BigNumber from 'bignumber.js';
import type { TokenConfig, Tx } from '@irys/upload-core';
import { BaseNodeToken } from '@irys/upload/tokens/base';
import type { Finality } from '@solana/web3.js';
import { Connection, Keypair, Transaction } from '@solana/web3.js';
type GetFeeResult = {
    computeBudget: BigNumber;
    computeUnitPrice: BigNumber;
};
export type SolanaTokenConfig = TokenConfig<any, {
    finality?: Finality;
    disablePriorityFees?: boolean;
}>;
export default class SolanaConfig extends BaseNodeToken {
    protected providerInstance: Connection;
    minConfirm: number;
    protected finality: Finality;
    config: SolanaTokenConfig;
    constructor(config: SolanaTokenConfig);
    getProvider(): Promise<Connection>;
    protected getKeyPair(): Keypair;
    getTx(txId: string): Promise<Tx>;
    ownerToAddress(owner: any): Promise<string>;
    sign(data: Uint8Array): Promise<Uint8Array>;
    getSigner(): Signer;
    verify(pub: any, data: Uint8Array, signature: Uint8Array): Promise<boolean>;
    getCurrentHeight(): Promise<BigNumber>;
    getFee(amount: BigNumber.Value, to?: string, multiplier?: BigNumber.Value): Promise<GetFeeResult>;
    sendTx(data: Transaction): Promise<string | undefined>;
    _createTxUnsigned(amount: BigNumber.Value, to: string, fee?: GetFeeResult): Promise<Transaction>;
    createTx(amount: BigNumber.Value, to: string, fee?: GetFeeResult): Promise<{
        txId: string | undefined;
        tx: any;
    }>;
    getPublicKey(): string | Buffer;
}
export {};
